//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UserGUI.BrokerReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="CoinList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="Coin")]
    [System.SerializableAttribute()]
    public class CoinList : System.Collections.Generic.List<UserGUI.BrokerReference.Coin> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Coin", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Coin : UserGUI.BrokerReference.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SymbolField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Symbol {
            get {
                return this.SymbolField;
            }
            set {
                if ((object.ReferenceEquals(this.SymbolField, value) != true)) {
                    this.SymbolField = value;
                    this.RaisePropertyChanged("Symbol");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseEntity", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserGUI.BrokerReference.User))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserGUI.BrokerReference.Log))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserGUI.BrokerReference.OrderHistory))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserGUI.BrokerReference.MyCoin))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserGUI.BrokerReference.Coin))]
    public partial class BaseEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class User : UserGUI.BrokerReference.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BirthDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecondNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BirthDate {
            get {
                return this.BirthDateField;
            }
            set {
                if ((this.BirthDateField.Equals(value) != true)) {
                    this.BirthDateField = value;
                    this.RaisePropertyChanged("BirthDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdmin {
            get {
                return this.IsAdminField;
            }
            set {
                if ((this.IsAdminField.Equals(value) != true)) {
                    this.IsAdminField = value;
                    this.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecondName {
            get {
                return this.SecondNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SecondNameField, value) != true)) {
                    this.SecondNameField = value;
                    this.RaisePropertyChanged("SecondName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Log", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Log : UserGUI.BrokerReference.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float PAndlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Action {
            get {
                return this.ActionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionField, value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float PAndl {
            get {
                return this.PAndlField;
            }
            set {
                if ((this.PAndlField.Equals(value) != true)) {
                    this.PAndlField = value;
                    this.RaisePropertyChanged("PAndl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderHistory", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class OrderHistory : UserGUI.BrokerReference.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ClosingTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float FillPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PlacingtimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float QtyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SideField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SymbolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ClosingTime {
            get {
                return this.ClosingTimeField;
            }
            set {
                if ((this.ClosingTimeField.Equals(value) != true)) {
                    this.ClosingTimeField = value;
                    this.RaisePropertyChanged("ClosingTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float FillPrice {
            get {
                return this.FillPriceField;
            }
            set {
                if ((this.FillPriceField.Equals(value) != true)) {
                    this.FillPriceField = value;
                    this.RaisePropertyChanged("FillPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Placingtime {
            get {
                return this.PlacingtimeField;
            }
            set {
                if ((this.PlacingtimeField.Equals(value) != true)) {
                    this.PlacingtimeField = value;
                    this.RaisePropertyChanged("Placingtime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Qty {
            get {
                return this.QtyField;
            }
            set {
                if ((this.QtyField.Equals(value) != true)) {
                    this.QtyField = value;
                    this.RaisePropertyChanged("Qty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Side {
            get {
                return this.SideField;
            }
            set {
                if ((object.ReferenceEquals(this.SideField, value) != true)) {
                    this.SideField = value;
                    this.RaisePropertyChanged("Side");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Symbol {
            get {
                return this.SymbolField;
            }
            set {
                if ((object.ReferenceEquals(this.SymbolField, value) != true)) {
                    this.SymbolField = value;
                    this.RaisePropertyChanged("Symbol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyCoin", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class MyCoin : UserGUI.BrokerReference.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private UserGUI.BrokerReference.Coin CoinField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private UserGUI.BrokerReference.User UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UserGUI.BrokerReference.Coin Coin {
            get {
                return this.CoinField;
            }
            set {
                if ((object.ReferenceEquals(this.CoinField, value) != true)) {
                    this.CoinField = value;
                    this.RaisePropertyChanged("Coin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UserGUI.BrokerReference.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="LogList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="Log")]
    [System.SerializableAttribute()]
    public class LogList : System.Collections.Generic.List<UserGUI.BrokerReference.Log> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="OrderHistoryList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="OrderHistory")]
    [System.SerializableAttribute()]
    public class OrderHistoryList : System.Collections.Generic.List<UserGUI.BrokerReference.OrderHistory> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="UserList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="User")]
    [System.SerializableAttribute()]
    public class UserList : System.Collections.Generic.List<UserGUI.BrokerReference.User> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="MyCoinList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="MyCoin")]
    [System.SerializableAttribute()]
    public class MyCoinList : System.Collections.Generic.List<UserGUI.BrokerReference.MyCoin> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BrokerReference.IServiceBroker")]
    public interface IServiceBroker {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/SelectAllCoins", ReplyAction="http://tempuri.org/IServiceBroker/SelectAllCoinsResponse")]
        UserGUI.BrokerReference.CoinList SelectAllCoins();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/SelectAllCoins", ReplyAction="http://tempuri.org/IServiceBroker/SelectAllCoinsResponse")]
        System.Threading.Tasks.Task<UserGUI.BrokerReference.CoinList> SelectAllCoinsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/SelectCoinByUser", ReplyAction="http://tempuri.org/IServiceBroker/SelectCoinByUserResponse")]
        System.Collections.Generic.Dictionary<UserGUI.BrokerReference.Coin, double> SelectCoinByUser(UserGUI.BrokerReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/SelectCoinByUser", ReplyAction="http://tempuri.org/IServiceBroker/SelectCoinByUserResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<UserGUI.BrokerReference.Coin, double>> SelectCoinByUserAsync(UserGUI.BrokerReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/InsertCoin", ReplyAction="http://tempuri.org/IServiceBroker/InsertCoinResponse")]
        bool InsertCoin(UserGUI.BrokerReference.Coin coin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/InsertCoin", ReplyAction="http://tempuri.org/IServiceBroker/InsertCoinResponse")]
        System.Threading.Tasks.Task<bool> InsertCoinAsync(UserGUI.BrokerReference.Coin coin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/UpdateCoin", ReplyAction="http://tempuri.org/IServiceBroker/UpdateCoinResponse")]
        bool UpdateCoin(UserGUI.BrokerReference.Coin coin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/UpdateCoin", ReplyAction="http://tempuri.org/IServiceBroker/UpdateCoinResponse")]
        System.Threading.Tasks.Task<bool> UpdateCoinAsync(UserGUI.BrokerReference.Coin coin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/DeleteCoin", ReplyAction="http://tempuri.org/IServiceBroker/DeleteCoinResponse")]
        bool DeleteCoin(UserGUI.BrokerReference.Coin coin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/DeleteCoin", ReplyAction="http://tempuri.org/IServiceBroker/DeleteCoinResponse")]
        System.Threading.Tasks.Task<bool> DeleteCoinAsync(UserGUI.BrokerReference.Coin coin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/SelectAllLogs", ReplyAction="http://tempuri.org/IServiceBroker/SelectAllLogsResponse")]
        UserGUI.BrokerReference.LogList SelectAllLogs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/SelectAllLogs", ReplyAction="http://tempuri.org/IServiceBroker/SelectAllLogsResponse")]
        System.Threading.Tasks.Task<UserGUI.BrokerReference.LogList> SelectAllLogsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/SelectLogByUser", ReplyAction="http://tempuri.org/IServiceBroker/SelectLogByUserResponse")]
        UserGUI.BrokerReference.LogList SelectLogByUser(UserGUI.BrokerReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/SelectLogByUser", ReplyAction="http://tempuri.org/IServiceBroker/SelectLogByUserResponse")]
        System.Threading.Tasks.Task<UserGUI.BrokerReference.LogList> SelectLogByUserAsync(UserGUI.BrokerReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/InsertLog", ReplyAction="http://tempuri.org/IServiceBroker/InsertLogResponse")]
        bool InsertLog(UserGUI.BrokerReference.Log log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/InsertLog", ReplyAction="http://tempuri.org/IServiceBroker/InsertLogResponse")]
        System.Threading.Tasks.Task<bool> InsertLogAsync(UserGUI.BrokerReference.Log log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/UpdateLog", ReplyAction="http://tempuri.org/IServiceBroker/UpdateLogResponse")]
        bool UpdateLog(UserGUI.BrokerReference.Log log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/UpdateLog", ReplyAction="http://tempuri.org/IServiceBroker/UpdateLogResponse")]
        System.Threading.Tasks.Task<bool> UpdateLogAsync(UserGUI.BrokerReference.Log log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/DeleteLog", ReplyAction="http://tempuri.org/IServiceBroker/DeleteLogResponse")]
        bool DeleteLog(UserGUI.BrokerReference.Log log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/DeleteLog", ReplyAction="http://tempuri.org/IServiceBroker/DeleteLogResponse")]
        System.Threading.Tasks.Task<bool> DeleteLogAsync(UserGUI.BrokerReference.Log log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/SelectAllOrderHistory", ReplyAction="http://tempuri.org/IServiceBroker/SelectAllOrderHistoryResponse")]
        UserGUI.BrokerReference.OrderHistoryList SelectAllOrderHistory();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/SelectAllOrderHistory", ReplyAction="http://tempuri.org/IServiceBroker/SelectAllOrderHistoryResponse")]
        System.Threading.Tasks.Task<UserGUI.BrokerReference.OrderHistoryList> SelectAllOrderHistoryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/SelectOrderHistoryByUser", ReplyAction="http://tempuri.org/IServiceBroker/SelectOrderHistoryByUserResponse")]
        UserGUI.BrokerReference.OrderHistoryList SelectOrderHistoryByUser(UserGUI.BrokerReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/SelectOrderHistoryByUser", ReplyAction="http://tempuri.org/IServiceBroker/SelectOrderHistoryByUserResponse")]
        System.Threading.Tasks.Task<UserGUI.BrokerReference.OrderHistoryList> SelectOrderHistoryByUserAsync(UserGUI.BrokerReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/InsertOrderHistory", ReplyAction="http://tempuri.org/IServiceBroker/InsertOrderHistoryResponse")]
        bool InsertOrderHistory(UserGUI.BrokerReference.OrderHistory orderHistory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/InsertOrderHistory", ReplyAction="http://tempuri.org/IServiceBroker/InsertOrderHistoryResponse")]
        System.Threading.Tasks.Task<bool> InsertOrderHistoryAsync(UserGUI.BrokerReference.OrderHistory orderHistory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/UpdateOrderHistory", ReplyAction="http://tempuri.org/IServiceBroker/UpdateOrderHistoryResponse")]
        bool UpdateOrderHistory(UserGUI.BrokerReference.OrderHistory orderHistory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/UpdateOrderHistory", ReplyAction="http://tempuri.org/IServiceBroker/UpdateOrderHistoryResponse")]
        System.Threading.Tasks.Task<bool> UpdateOrderHistoryAsync(UserGUI.BrokerReference.OrderHistory orderHistory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/DeleteOrderHistory", ReplyAction="http://tempuri.org/IServiceBroker/DeleteOrderHistoryResponse")]
        bool DeleteOrderHistory(UserGUI.BrokerReference.OrderHistory orderHistory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/DeleteOrderHistory", ReplyAction="http://tempuri.org/IServiceBroker/DeleteOrderHistoryResponse")]
        System.Threading.Tasks.Task<bool> DeleteOrderHistoryAsync(UserGUI.BrokerReference.OrderHistory orderHistory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/SelectAllUsers", ReplyAction="http://tempuri.org/IServiceBroker/SelectAllUsersResponse")]
        UserGUI.BrokerReference.UserList SelectAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/SelectAllUsers", ReplyAction="http://tempuri.org/IServiceBroker/SelectAllUsersResponse")]
        System.Threading.Tasks.Task<UserGUI.BrokerReference.UserList> SelectAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/SelectUserByEmail", ReplyAction="http://tempuri.org/IServiceBroker/SelectUserByEmailResponse")]
        UserGUI.BrokerReference.User SelectUserByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/SelectUserByEmail", ReplyAction="http://tempuri.org/IServiceBroker/SelectUserByEmailResponse")]
        System.Threading.Tasks.Task<UserGUI.BrokerReference.User> SelectUserByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/SelectUserByUserName", ReplyAction="http://tempuri.org/IServiceBroker/SelectUserByUserNameResponse")]
        UserGUI.BrokerReference.User SelectUserByUserName(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/SelectUserByUserName", ReplyAction="http://tempuri.org/IServiceBroker/SelectUserByUserNameResponse")]
        System.Threading.Tasks.Task<UserGUI.BrokerReference.User> SelectUserByUserNameAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/InsertUser", ReplyAction="http://tempuri.org/IServiceBroker/InsertUserResponse")]
        bool InsertUser(UserGUI.BrokerReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/InsertUser", ReplyAction="http://tempuri.org/IServiceBroker/InsertUserResponse")]
        System.Threading.Tasks.Task<bool> InsertUserAsync(UserGUI.BrokerReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/UpdateUser", ReplyAction="http://tempuri.org/IServiceBroker/UpdateUserResponse")]
        bool UpdateUser(UserGUI.BrokerReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/UpdateUser", ReplyAction="http://tempuri.org/IServiceBroker/UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAsync(UserGUI.BrokerReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/DeleteUser", ReplyAction="http://tempuri.org/IServiceBroker/DeleteUserResponse")]
        bool DeleteUser(UserGUI.BrokerReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/DeleteUser", ReplyAction="http://tempuri.org/IServiceBroker/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(UserGUI.BrokerReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/GetCoinsByUser", ReplyAction="http://tempuri.org/IServiceBroker/GetCoinsByUserResponse")]
        UserGUI.BrokerReference.MyCoinList GetCoinsByUser(UserGUI.BrokerReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/GetCoinsByUser", ReplyAction="http://tempuri.org/IServiceBroker/GetCoinsByUserResponse")]
        System.Threading.Tasks.Task<UserGUI.BrokerReference.MyCoinList> GetCoinsByUserAsync(UserGUI.BrokerReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/InsertMyCoin", ReplyAction="http://tempuri.org/IServiceBroker/InsertMyCoinResponse")]
        bool InsertMyCoin(UserGUI.BrokerReference.MyCoin myCoin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/InsertMyCoin", ReplyAction="http://tempuri.org/IServiceBroker/InsertMyCoinResponse")]
        System.Threading.Tasks.Task<bool> InsertMyCoinAsync(UserGUI.BrokerReference.MyCoin myCoin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/UpdateMyCoin", ReplyAction="http://tempuri.org/IServiceBroker/UpdateMyCoinResponse")]
        bool UpdateMyCoin(UserGUI.BrokerReference.MyCoin myCoin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/UpdateMyCoin", ReplyAction="http://tempuri.org/IServiceBroker/UpdateMyCoinResponse")]
        System.Threading.Tasks.Task<bool> UpdateMyCoinAsync(UserGUI.BrokerReference.MyCoin myCoin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/DeleteMyCoin", ReplyAction="http://tempuri.org/IServiceBroker/DeleteMyCoinResponse")]
        bool DeleteMyCoin(UserGUI.BrokerReference.MyCoin myCoin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/DeleteMyCoin", ReplyAction="http://tempuri.org/IServiceBroker/DeleteMyCoinResponse")]
        System.Threading.Tasks.Task<bool> DeleteMyCoinAsync(UserGUI.BrokerReference.MyCoin myCoin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/GiveCoinValue", ReplyAction="http://tempuri.org/IServiceBroker/GiveCoinValueResponse")]
        System.Collections.Generic.Dictionary<string, decimal> GiveCoinValue(string[] Value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBroker/GiveCoinValue", ReplyAction="http://tempuri.org/IServiceBroker/GiveCoinValueResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, decimal>> GiveCoinValueAsync(string[] Value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceBrokerChannel : UserGUI.BrokerReference.IServiceBroker, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceBrokerClient : System.ServiceModel.ClientBase<UserGUI.BrokerReference.IServiceBroker>, UserGUI.BrokerReference.IServiceBroker {
        
        public ServiceBrokerClient() {
        }
        
        public ServiceBrokerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceBrokerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceBrokerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceBrokerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public UserGUI.BrokerReference.CoinList SelectAllCoins() {
            return base.Channel.SelectAllCoins();
        }
        
        public System.Threading.Tasks.Task<UserGUI.BrokerReference.CoinList> SelectAllCoinsAsync() {
            return base.Channel.SelectAllCoinsAsync();
        }
        
        public System.Collections.Generic.Dictionary<UserGUI.BrokerReference.Coin, double> SelectCoinByUser(UserGUI.BrokerReference.User user) {
            return base.Channel.SelectCoinByUser(user);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<UserGUI.BrokerReference.Coin, double>> SelectCoinByUserAsync(UserGUI.BrokerReference.User user) {
            return base.Channel.SelectCoinByUserAsync(user);
        }
        
        public bool InsertCoin(UserGUI.BrokerReference.Coin coin) {
            return base.Channel.InsertCoin(coin);
        }
        
        public System.Threading.Tasks.Task<bool> InsertCoinAsync(UserGUI.BrokerReference.Coin coin) {
            return base.Channel.InsertCoinAsync(coin);
        }
        
        public bool UpdateCoin(UserGUI.BrokerReference.Coin coin) {
            return base.Channel.UpdateCoin(coin);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCoinAsync(UserGUI.BrokerReference.Coin coin) {
            return base.Channel.UpdateCoinAsync(coin);
        }
        
        public bool DeleteCoin(UserGUI.BrokerReference.Coin coin) {
            return base.Channel.DeleteCoin(coin);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCoinAsync(UserGUI.BrokerReference.Coin coin) {
            return base.Channel.DeleteCoinAsync(coin);
        }
        
        public UserGUI.BrokerReference.LogList SelectAllLogs() {
            return base.Channel.SelectAllLogs();
        }
        
        public System.Threading.Tasks.Task<UserGUI.BrokerReference.LogList> SelectAllLogsAsync() {
            return base.Channel.SelectAllLogsAsync();
        }
        
        public UserGUI.BrokerReference.LogList SelectLogByUser(UserGUI.BrokerReference.User user) {
            return base.Channel.SelectLogByUser(user);
        }
        
        public System.Threading.Tasks.Task<UserGUI.BrokerReference.LogList> SelectLogByUserAsync(UserGUI.BrokerReference.User user) {
            return base.Channel.SelectLogByUserAsync(user);
        }
        
        public bool InsertLog(UserGUI.BrokerReference.Log log) {
            return base.Channel.InsertLog(log);
        }
        
        public System.Threading.Tasks.Task<bool> InsertLogAsync(UserGUI.BrokerReference.Log log) {
            return base.Channel.InsertLogAsync(log);
        }
        
        public bool UpdateLog(UserGUI.BrokerReference.Log log) {
            return base.Channel.UpdateLog(log);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateLogAsync(UserGUI.BrokerReference.Log log) {
            return base.Channel.UpdateLogAsync(log);
        }
        
        public bool DeleteLog(UserGUI.BrokerReference.Log log) {
            return base.Channel.DeleteLog(log);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteLogAsync(UserGUI.BrokerReference.Log log) {
            return base.Channel.DeleteLogAsync(log);
        }
        
        public UserGUI.BrokerReference.OrderHistoryList SelectAllOrderHistory() {
            return base.Channel.SelectAllOrderHistory();
        }
        
        public System.Threading.Tasks.Task<UserGUI.BrokerReference.OrderHistoryList> SelectAllOrderHistoryAsync() {
            return base.Channel.SelectAllOrderHistoryAsync();
        }
        
        public UserGUI.BrokerReference.OrderHistoryList SelectOrderHistoryByUser(UserGUI.BrokerReference.User user) {
            return base.Channel.SelectOrderHistoryByUser(user);
        }
        
        public System.Threading.Tasks.Task<UserGUI.BrokerReference.OrderHistoryList> SelectOrderHistoryByUserAsync(UserGUI.BrokerReference.User user) {
            return base.Channel.SelectOrderHistoryByUserAsync(user);
        }
        
        public bool InsertOrderHistory(UserGUI.BrokerReference.OrderHistory orderHistory) {
            return base.Channel.InsertOrderHistory(orderHistory);
        }
        
        public System.Threading.Tasks.Task<bool> InsertOrderHistoryAsync(UserGUI.BrokerReference.OrderHistory orderHistory) {
            return base.Channel.InsertOrderHistoryAsync(orderHistory);
        }
        
        public bool UpdateOrderHistory(UserGUI.BrokerReference.OrderHistory orderHistory) {
            return base.Channel.UpdateOrderHistory(orderHistory);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateOrderHistoryAsync(UserGUI.BrokerReference.OrderHistory orderHistory) {
            return base.Channel.UpdateOrderHistoryAsync(orderHistory);
        }
        
        public bool DeleteOrderHistory(UserGUI.BrokerReference.OrderHistory orderHistory) {
            return base.Channel.DeleteOrderHistory(orderHistory);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteOrderHistoryAsync(UserGUI.BrokerReference.OrderHistory orderHistory) {
            return base.Channel.DeleteOrderHistoryAsync(orderHistory);
        }
        
        public UserGUI.BrokerReference.UserList SelectAllUsers() {
            return base.Channel.SelectAllUsers();
        }
        
        public System.Threading.Tasks.Task<UserGUI.BrokerReference.UserList> SelectAllUsersAsync() {
            return base.Channel.SelectAllUsersAsync();
        }
        
        public UserGUI.BrokerReference.User SelectUserByEmail(string email) {
            return base.Channel.SelectUserByEmail(email);
        }
        
        public System.Threading.Tasks.Task<UserGUI.BrokerReference.User> SelectUserByEmailAsync(string email) {
            return base.Channel.SelectUserByEmailAsync(email);
        }
        
        public UserGUI.BrokerReference.User SelectUserByUserName(string userName) {
            return base.Channel.SelectUserByUserName(userName);
        }
        
        public System.Threading.Tasks.Task<UserGUI.BrokerReference.User> SelectUserByUserNameAsync(string userName) {
            return base.Channel.SelectUserByUserNameAsync(userName);
        }
        
        public bool InsertUser(UserGUI.BrokerReference.User user) {
            return base.Channel.InsertUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> InsertUserAsync(UserGUI.BrokerReference.User user) {
            return base.Channel.InsertUserAsync(user);
        }
        
        public bool UpdateUser(UserGUI.BrokerReference.User user) {
            return base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAsync(UserGUI.BrokerReference.User user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public bool DeleteUser(UserGUI.BrokerReference.User user) {
            return base.Channel.DeleteUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(UserGUI.BrokerReference.User user) {
            return base.Channel.DeleteUserAsync(user);
        }
        
        public UserGUI.BrokerReference.MyCoinList GetCoinsByUser(UserGUI.BrokerReference.User user) {
            return base.Channel.GetCoinsByUser(user);
        }
        
        public System.Threading.Tasks.Task<UserGUI.BrokerReference.MyCoinList> GetCoinsByUserAsync(UserGUI.BrokerReference.User user) {
            return base.Channel.GetCoinsByUserAsync(user);
        }
        
        public bool InsertMyCoin(UserGUI.BrokerReference.MyCoin myCoin) {
            return base.Channel.InsertMyCoin(myCoin);
        }
        
        public System.Threading.Tasks.Task<bool> InsertMyCoinAsync(UserGUI.BrokerReference.MyCoin myCoin) {
            return base.Channel.InsertMyCoinAsync(myCoin);
        }
        
        public bool UpdateMyCoin(UserGUI.BrokerReference.MyCoin myCoin) {
            return base.Channel.UpdateMyCoin(myCoin);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateMyCoinAsync(UserGUI.BrokerReference.MyCoin myCoin) {
            return base.Channel.UpdateMyCoinAsync(myCoin);
        }
        
        public bool DeleteMyCoin(UserGUI.BrokerReference.MyCoin myCoin) {
            return base.Channel.DeleteMyCoin(myCoin);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMyCoinAsync(UserGUI.BrokerReference.MyCoin myCoin) {
            return base.Channel.DeleteMyCoinAsync(myCoin);
        }
        
        public System.Collections.Generic.Dictionary<string, decimal> GiveCoinValue(string[] Value) {
            return base.Channel.GiveCoinValue(Value);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, decimal>> GiveCoinValueAsync(string[] Value) {
            return base.Channel.GiveCoinValueAsync(Value);
        }
    }
}
